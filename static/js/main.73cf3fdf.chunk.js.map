{"version":3,"sources":["api/config.js","api/utils.js","api/index.js","components/Column.js","components/Row.js","utils/date.js","App.js","serviceWorker.js","index.js"],"names":["API_URL_BASE","toQueryString","data","params","Object","entries","key","value","encodeURIComponent","getClaims","a","get","claims","hoursExceedingSLA","claim","today","Date","updated","updatedAt","Math","abs","sort","b","url","fetch","response","json","Column","styled","div","attrs","className","Row","props","header","format","dateStr","date","parts","Intl","DateTimeFormat","year","month","day","formatToParts","App","useState","setClaims","useEffect","fetchData","map","id","claimant","assignedTo","status","createdAt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73cf3fdf.chunk.js","sourcesContent":["export const API_URL_BASE =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:2000\"\n    : \"https://my-json-server.typicode.com/mithuniverse/claims-dashboard\";\n","export function toQueryString(data) {\n  if (data == null) return \"\";\n  let params = \"?\";\n  for (const [key, value] of Object.entries(data)) {\n    params += `${encodeURIComponent(key)}=${encodeURIComponent(value)}&`;\n  }\n  return params;\n}\n","import { API_URL_BASE } from \"./config\";\nimport { toQueryString } from \"./utils\";\n\nexport const getSLAs = async (params) => await get(\"/slas\", params);\n\nexport const getClaims = async (params) => {\n  const claims = await get(\"/claims\", params);\n\n  const hoursExceedingSLA = (claim) => {\n    const today = new Date();\n    const updated = new Date(claim.updatedAt);\n    return Math.abs(updated - today) / 3.6e6;\n  };\n\n  return claims.sort((a, b) => hoursExceedingSLA(b) - hoursExceedingSLA(a));\n};\n\nasync function get(url, params) {\n  const response = await fetch(`${API_URL_BASE}${url}${toQueryString(params)}`);\n  return await response.json();\n}\n","import styled from \"styled-components\";\n\nexport const Column = styled.div.attrs(() => ({ className: \"col\" }))`\n  margin: 0 12px;\n  min-width: 140px;\n`;\n","import styled from \"styled-components\";\n\nexport const Row = styled.div.attrs(() => ({ className: \"row\" }))`\n  margin: 12px 0;\n\n  font-weight: ${(props) => (props.header ? \"900\" : \"300\")};\n\n  & .col {\n    display: inline-block;\n  }\n`;\n","export function format(dateStr) {\n  const date = new Date(dateStr);\n  const options = { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" };\n  const parts = Intl.DateTimeFormat(\"en\", options).formatToParts(date);\n  const [{ value: month }, , { value: day }, , { value: year }] = parts;\n  return `${day}-${month}-${year}`;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { getClaims } from \"./api\";\nimport { Row, Column } from \"./components\";\nimport { format } from \"./utils/date\";\n\nfunction App() {\n  const [claims, setClaims] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      setClaims(await getClaims());\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <Row header>\n        <Column>Claimant</Column>\n        <Column>Assigned</Column>\n        <Column>Status</Column>\n        <Column>Created</Column>\n        <Column>Updated</Column>\n      </Row>\n      {claims.map((claim) => (\n        <Row key={claim.id}>\n          <Column>{claim.claimant}</Column>\n          <Column>{claim.assignedTo}</Column>\n          <Column>{claim.status}</Column>\n          <Column>{format(claim.createdAt)}</Column>\n          <Column>{format(claim.updatedAt)}</Column>\n        </Row>\n      ))}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}